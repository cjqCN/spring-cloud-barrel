<?xml version="1.0" encoding="UTF-8" ?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<!--shutdownHook:指定当JVM停止的时候，Log4j是否应该停止。停止钩子默认是启用的，也可以通过设置这个属性点值为disable来禁用它，这样我们就可以完全记录应用的整个生命周期。-->
<!--monitorInterval="3600" 指log4j2每隔 3600 秒（1小时），自动监控该配置文件是否有变化，如果变化，则自动根据文件内容重新配置。-->
<Configuration monitoringInterval="3600" shutdownHook="disable">
    <Properties>
        <!--kafka地址-->
        <Property name="kafka.bootstrap.servers">http://120.78.73.29:9094</Property>
        <!--kafka topic-->
        <Property name="kafka.topic">log</Property>
        <!--应用id-->
        <Property name="application-id">cehn-resource</Property>
        <!--实例id 通过环境变量注入-->
        <Property name="instance-id">${sys:instance_id}</Property>
        <!--======================================================-->
        <Property name="basedir">logs/cehn-resource</Property>
        <Property name="all-logger">all-logger</Property>
        <Property name="all-json-logger">all-json-logger</Property>
        <Property name="springframework-logger">springframework-logger</Property>
        <Property name="springframework-security-logger">springframework-security-logger</Property>
        <Property name="springframework-cloud-logger">springframework-cloud-logger</Property>
        <Property name="apache-logger">apache-logger</Property>
        <Property name="business-logger">business-logger</Property>
        <Property name="mybatis-logger">mybatis-logger</Property>
        <!--======================================================-->
        <!--高亮日志格式-->
        <Property name="logFormat-highlight">
            %highlight{[%d{yyyy-MM-dd HH:mm:ss.SSS}] - [%p] - [%c:%L] - [Method = %M] - [%m]}%n
        </Property>
        <!--普通日志格式-->
        <Property name="logFormat">
            [%d{yyyy-MM-dd HH:mm:ss.SSS}] - [%p] - [%c:%L] - [Method = %M] - [%m]%n
        </Property>
        <!--发送到kafka的日志格式 添加实例id 、应用id-->
        <Property name="kafka-logFormat">
            [${application-id}][${instance-id}][%d{yyyy-MM-dd HH:mm:ss.SSS}] - [%p] - [%c:%L] - [Method = %M] - [%m]%n
        </Property>
    </Properties>

    <Appenders>
        <!--控制台日志输出设置 start-->
        <Console name="to-console" target="SYSTEM_OUT">
            <PatternLayout pattern="${logFormat-highlight}"/>
        </Console>
        <!--控制台日志输出设置 end-->

        <!--文件日志输出设置 start-->
        <!--filePattern：表示当日志到达指定的大小或者时间，产生新日志时，旧日志的命名路径。-->
        <!--Policies：策略，表示日志什么时候应该产生新日志，可以有时间策略和大小策略等-->
        <RollingFile name="${springframework-logger}" fileName="${basedir}/${springframework-logger}.log" append="true" filePattern="${basedir}/$${date:yyyy-MM}/${springframework-logger}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${logFormat-highlight}"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到50M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 最大保存文件数，超过的删除 -->
            <DefaultRolloverStrategy max="10" compressionLevel="9">
                <Delete basePath="${basedir}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <RollingFile name="${springframework-cloud-logger}" fileName="${basedir}/${springframework-cloud-logger}.log" append="true" filePattern="${basedir}/$${date:yyyy-MM}/${springframework-cloud-logger}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${logFormat-highlight}"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到50M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 最大保存文件数，超过的删除 -->
            <DefaultRolloverStrategy max="10" compressionLevel="9">
                <Delete basePath="${basedir}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <RollingFile name="${springframework-security-logger}" fileName="${basedir}/${springframework-security-logger}.log" append="true" filePattern="${basedir}/$${date:yyyy-MM}/${springframework-security-logger}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${logFormat-highlight}"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到50M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 最大保存文件数，超过的删除 -->
            <DefaultRolloverStrategy max="10" compressionLevel="9">
                <Delete basePath="${basedir}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <RollingFile name="${mybatis-logger}" fileName="${basedir}/${mybatis-logger}.log" append="true" filePattern="${basedir}/$${date:yyyy-MM}/${mybatis-logger}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${logFormat-highlight}"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到50M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 最大保存文件数，超过的删除 -->
            <DefaultRolloverStrategy max="10" compressionLevel="9">
                <Delete basePath="${basedir}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <RollingFile name="${apache-logger}" fileName="${basedir}/${apache-logger}.log" append="true" filePattern="${basedir}/$${date:yyyy-MM}/${apache-logger}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${logFormat-highlight}"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到50M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 最大保存文件数，超过的删除 -->
            <DefaultRolloverStrategy max="10" compressionLevel="9">
                <Delete basePath="${basedir}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <RollingFile name="${business-logger}" fileName="${basedir}/${business-logger}.log" append="true" filePattern="${basedir}/$${date:yyyy-MM}/${business-logger}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${logFormat-highlight}"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到50M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 最大保存文件数，超过的删除 -->
            <DefaultRolloverStrategy max="10" compressionLevel="9">
                <Delete basePath="${basedir}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <RollingFile name="${all-logger}" fileName="${basedir}/${all-logger}.log" append="true" filePattern="${basedir}/$${date:yyyy-MM}/${all-logger}-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="${logFormat-highlight}"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到50M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 最大保存文件数，超过的删除 -->
            <DefaultRolloverStrategy max="10" compressionLevel="9">
                <Delete basePath="${basedir}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <RollingFile name="${all-json-logger}" fileName="${basedir}/${all-json-logger}.log" append="true" filePattern="${basedir}/$${date:yyyy-MM}/${all-json-logger}-%d{yyyy-MM-dd}-%i.log">
            <!--compact="true" 表示对 JSON 进行压缩-->
            <JsonLayout compact="true" eventEol="true"/>
            <Policies>
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="30 MB"/><!-- 每到50M生成一个日志文件 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 最大保存文件数，超过的删除 -->
            <DefaultRolloverStrategy max="10" compressionLevel="9">
                <Delete basePath="${basedir}" maxDepth="2">
                    <IfFileName glob="*/*.log.gz"/>
                    <IfLastModified age="7d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
        <!--文件日志输出设置 end-->
        <!--

                Kafka日志输出设置 start
                设置topic
                <Kafka name="KafkaLog" topic="${kafka.topic}" ignoreExceptions="false">
                    <PatternLayout
                            pattern="${kafka-logFormat}"/>
                    设置Kafka连接
                    <Property name="bootstrap.servers">${kafka.bootstrap.servers}</Property>
                    设置最大阻塞时间
                    <Property name="max.block.ms">2000</Property>
                </Kafka>

                当Kafka宕机时采取写本地文件
                <RollingFile name="failoverKafkaLog" fileName="${basedir}/kafka/failoverKafkaLog.log" append="true"
                             filePattern="${basedir}/kafka/$${date:yyyy-MM}/failoverKafkaLog-%d{yyyy-MM-dd}-%i.log">
                    <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
                    <PatternLayout
                            pattern="${logFormat-highlight}"/>
                    <Policies>
                        <OnStartupTriggeringPolicy/>
                        <SizeBasedTriggeringPolicy size="30 MB"/> 每到50M生成一个日志文件
                        <TimeBasedTriggeringPolicy/>
                    </Policies>
                     最大保存文件数，超过的删除
                    <DefaultRolloverStrategy max="10" compressionLevel="9">
                        <Delete basePath="${basedir}" maxDepth="2">
                            <IfFileName glob="*/*.log.gz"/>
                            <IfLastModified age="7d"/>
                        </Delete>
                    </DefaultRolloverStrategy>

                </RollingFile>

                设置策略
                <Failover name="KafkaFailover" primary="KafkaLog" retryIntervalSeconds="600">
                    <Failovers>
                        <AppenderRef ref="failoverKafkaLog"/>
                    </Failovers>
                </Failover>
                Kafka日志输出设置 end
        -->

    </Appenders>

    <!--监控日志的位置设置 start-->
    <Loggers>
        <!--采用异步记录-->
        <AsyncRoot level="info" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <!--<AppenderRef ref="KafkaFailover"/>-->
        </AsyncRoot>

        <!--additivity 字段，通过配置该字段，我们可以规定是否将日志事件传递到 Logger 的父结点处理，其默认值为true（即默认交给parent Logger处理）-->
        <!--异步的时候 includeLocation="true" 才会显示具体的行号，以及日志所在的类名；如果设置为false，哪怕<Pattern>设置了输出行号也不会显示出来；-->
        <AsyncLogger name="com.banggood.adg" level="trace" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${business-logger}"/>
        </AsyncLogger>

        <!--spring 框架 start-->
        <AsyncLogger name="org.springframework" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>

        <AsyncLogger name="org.springframework.context.annotation" level="off" additivity="false"/>
        <AsyncLogger name="org.springframework.boot.devtools" level="off" additivity="false"/>

        <AsyncLogger name="org.springframework.boot" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>

        <AsyncLogger name="org.springframework.cloud" level="info" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
            <AppenderRef ref="${springframework-cloud-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="com.netflix" level="info" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
            <AppenderRef ref="${springframework-cloud-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.cloud.context" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
            <AppenderRef ref="${springframework-cloud-logger}"/>
        </AsyncLogger>

        <AsyncLogger name="org.springframework.security" level="debug" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
            <AppenderRef ref="${springframework-security-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.boot.autoconfigure.security" level="info" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
            <AppenderRef ref="${springframework-security-logger}"/>
        </AsyncLogger>

        <AsyncLogger name="org.springframework.web" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.web.socket" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.scheduling" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.messaging" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.integration" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.amqp" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.aop" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.springframework.boot.actuate.autoconfigure" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${springframework-logger}"/>
        </AsyncLogger>
        <!--spring 框架 end-->

        <!--mybatis + mybatis plus start-->
        <AsyncLogger name="com.baomidou" level="debug" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${mybatis-logger}"/>
        </AsyncLogger>

        <AsyncLogger name="org.apache.ibatis" level="debug" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${mybatis-logger}"/>
        </AsyncLogger>

        <AsyncLogger name="org.mybatis" level="debug" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${mybatis-logger}"/>
        </AsyncLogger>
        <!--mybatis + mybatis plus end-->

        <!--apache start-->
        <AsyncLogger name="org.apache" level="error" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${apache-logger}"/>
        </AsyncLogger>
        <AsyncLogger name="org.apache.http" level="warn" additivity="false" includeLocation="true">
            <AppenderRef ref="to-console"/>
            <AppenderRef ref="${all-logger}"/>
            <AppenderRef ref="${apache-logger}"/>
        </AsyncLogger>
        <!--apache end-->

    </Loggers>
    <!--监控日志的位置设置 end-->

</Configuration>